print("192365034 NANDA REDDY")
import math
import random

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights randomly
        self.W1 = [[random.uniform(-1, 1) for _ in range(hidden_size)] for _ in range(input_size)]
        self.b1 = [0.0] * hidden_size
        self.W2 = [[random.uniform(-1, 1) for _ in range(output_size)] for _ in range(hidden_size)]
        self.b2 = [0.0] * output_size

    def sigmoid(self, x):
        return 1 / (1 + math.exp(-x))

    def forward(self, X):
        # Input to hidden layer
        self.z1 = [sum(X[i] * self.W1[i][j] for i in range(len(X))) + self.b1[j] for j in range(len(self.b1))]
        self.a1 = [self.sigmoid(z) for z in self.z1]

        # Hidden to output layer
        self.z2 = [sum(self.a1[j] * self.W2[j][k] for j in range(len(self.a1))) + self.b2[k] for k in range(len(self.b2))]
        self.a2 = [self.sigmoid(z) for z in self.z2]
        return self.a2

    def train(self, X, y, epochs=1000, lr=0.1):
        for epoch in range(epochs):
            for i in range(len(X)):
                # Forward pass
                output = self.forward(X[i])

                # Backpropagation
                error = [output[k] - y[i][k] for k in range(len(output))]

                # Update output layer weights
                for j in range(len(self.a1)):
                    for k in range(len(output)):
                        self.W2[j][k] -= lr * error[k] * self.a1[j]
                        self.b2[k] -= lr * error[k]

                # Update hidden layer weights
                for i_in in range(len(X[i])):
                    for j in range(len(self.a1)):
                        self.W1[i_in][j] -= lr * sum(error[k] * self.W2[j][k] for k in range(len(output))) * self.a1[j] * (1 - self.a1[j]) * X[i][i_in]
                        self.b1[j] -= lr * sum(error[k] * self.W2[j][k] for k in range(len(output))) * self.a1[j] * (1 - self.a1[j])

# Example usage
if __name__ == "__main__":
    # XOR problem dataset
    X = [[0, 0], [0, 1], [1, 0], [1, 1]]
    y = [[0], [1], [1], [0]]

    # Create network (2 inputs, 2 hidden neurons, 1 output)
    nn = NeuralNetwork(input_size=2, hidden_size=2, output_size=1)

    # Train the network
    nn.train(X, y, epochs=10000, lr=0.1)

    # Test predictions
    print("\nPredictions:")
    for x in X:
        pred = nn.forward(x)
        print(f"{x} -> {pred[0]:.4f}")
