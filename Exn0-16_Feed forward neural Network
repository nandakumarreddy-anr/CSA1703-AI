print("192365034 NANDA REDDY")
import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights with random values
        self.W1 = np.random.randn(input_size, hidden_size) * 0.01
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, output_size) * 0.01
        self.b2 = np.zeros((1, output_size))
    
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def forward(self, X):
        # Input to hidden layer
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = self.sigmoid(self.z1)
        
        # Hidden to output layer
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = self.sigmoid(self.z2)
        return self.a2
    
    def train(self, X, y, epochs=1000, lr=0.1):
        for epoch in range(epochs):
            # Forward pass
            output = self.forward(X)
            
            # Backpropagation
            error = output - y
            dW2 = np.dot(self.a1.T, error)
            db2 = np.sum(error, axis=0, keepdims=True)
            
            error_hidden = np.dot(error, self.W2.T) * (self.a1 * (1 - self.a1))
            dW1 = np.dot(X.T, error_hidden)
            db1 = np.sum(error_hidden, axis=0)
            
            # Update weights
            self.W2 -= lr * dW2
            self.b2 -= lr * db2
            self.W1 -= lr * dW1
            self.b1 -= lr * db1
            
            if epoch % 100 == 0:
                loss = np.mean(np.square(error))
                print(f"Epoch {epoch}, Loss: {loss:.4f}")

# Example usage
if __name__ == "__main__":
    # XOR problem dataset
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    y = np.array([[0], [1], [1], [0]])
    
    # Create network (2 inputs, 4 hidden neurons, 1 output)
    nn = NeuralNetwork(input_size=2, hidden_size=4, output_size=1)
    
    # Train the network
    nn.train(X, y, epochs=10000, lr=0.1)
    
    # Test predictions
    print("\nPredictions:")
    for x in X:
        pred = nn.forward(x.reshape(1, -1))
        print(f"{x} -> {pred[0][0]:.4f}")
