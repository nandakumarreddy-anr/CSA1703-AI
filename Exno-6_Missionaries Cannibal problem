print("192365034 NANDA REDDY")
from collections import deque

def is_valid(state):
    m_left, c_left, boat, m_right, c_right = state
    # Check if missionaries are outnumbered on either side
    if (m_left > 0 and c_left > m_left) or (m_right > 0 and c_right > m_right):
        return False
    return True

def solve():
    initial_state = (3, 3, 'left', 0, 0)
    goal_state = (0, 0, 'right', 3, 3)
    
    visited = set()
    queue = deque()
    queue.append([initial_state])
    
    while queue:
        path = queue.popleft()
        current_state = path[-1]
        
        if current_state == goal_state:
            return path
        
        if current_state in visited:
            continue
        visited.add(current_state)
        
        m_left, c_left, boat, m_right, c_right = current_state
        
        # Possible moves: (m, c) where m + c <= 2 and >= 1
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        
        for m, c in moves:
            if boat == 'left':
                new_state = (m_left - m, c_left - c, 'right', m_right + m, c_right + c)
            else:
                new_state = (m_left + m, c_left + c, 'left', m_right - m, c_right - c)
            
            # Check only the numeric values (excluding boat position)
            if (new_state[0] >= 0 and new_state[1] >= 0 and 
                new_state[3] >= 0 and new_state[4] >= 0 and 
                is_valid(new_state)):
                new_path = path.copy()
                new_path.append(new_state)
                queue.append(new_path)
    
    return None

# Solve and print the solution
solution = solve()
if solution:
    print("Solution found:")
    for i, state in enumerate(solution):
        m_left, c_left, boat, m_right, c_right = state
        print(f"Step {i}: {m_left}M {c_left}C {boat} | {m_right}M {c_right}C")
else:
    print("No solution found")
